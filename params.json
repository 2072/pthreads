{"name":"pthreads","tagline":"Threading for PHP","body":"# Share Nothing, Do Everything :)\r\n\r\nThis project provides multi-threading that is compatible with PHP based on Posix Threads.\r\n\r\n## Highlights\r\n\r\n* An easy to use, quick to learn Threading API for PHP5.3+\r\n* Execute any and all predefined and user declared methods and functions asynchronously\r\n* Ready made synchronization included, geared towards the PHP environment\r\n* Seemless operation in multi-threaded SAPI environments\r\n* A world of possibilities ...\r\n\r\n## Technical Features\r\n\r\n* Posix Threads\r\n* Synchronization\r\n* Worker Threads\r\n* Synchronized Methods\r\n* Complete Support for OO - ie. traits, interfaces, inheritance\r\n* Full read/write/execute support for threaded objects\r\n* Mutex ( direct, subset )\r\n* Conditions ( direct, subset )\r\n\r\npthreads was written with simplicity, compatibiilty and efficiency in mind, it's performance beggars belief !!\r\n\r\n## Requirements\r\n\r\n* PHP5.3+ on x64 or x86\r\n* ZTS Enabled ( Thread Safety )\r\n* Posix Threads implementation that PHP will compile with\r\n\r\nTesting has been carried out both on x86 and x64 architechtures with varying hardware, this code may work in untested environments, keep me updated ...\r\n\r\n### Supported PHP Versions\r\n\r\npthreads should compile and work in any version of PHP from 5.3.0 to the latest release.\r\n\r\n### Windows Support\r\n\r\nYes !! Windows support is offered thanks to the pthread-w32 library.\r\n\r\nReleases for Windows can be found: http://windows.php.net/downloads/pecl/releases/pthreads/\r\n\r\nSnapshots for Windows can (sometimes) be found: http://pthreads.org/snapshots/\r\n\r\n### Mac OSX Support\r\n\r\nYes !! Users of Mac will be glad to hear that pthreads is now tested on OSX as part of the development process.\r\n\r\n### Hello World\r\n\r\nAs is customary in our line of work:\r\n\r\n```php\r\n<?php\r\nclass AsyncOperation extends Thread {\r\n  public function __construct($arg){\r\n    $this->arg = $arg;\r\n  }\r\n\r\n  public function run(){\r\n    if($this->arg){\r\n      printf(\"Hello %s\\n\", $this->arg);\r\n    }\r\n  }\r\n}\r\n$thread = new AsyncOperation(\"World\");\r\nif($thread->start())\r\n  $thread->join();\r\n?>\r\n```\r\n\r\n### Are you serious ?\r\n\r\nAbsolutely, this is not a hack, we _don't_ use forking or any other such nonsense, what you create are honest to goodness posix threads that are completely compatible with PHP and safe ... this is true multi-threading :)\r\n\r\nPHP is awesomely powerful, but the simple fact of the matter is, the number of extensions or features a language has doesn't matter one bit. What matters is how many features or extensions you can utilize in your latest and greatest project.\r\nWe only have about one or two seconds to send a page to a user, in practice we end up picking and choosing which of PHP's features we will use because time is always a factor. Enterprising applications usually have to look to Java or the .NET\r\nframework if they are designed to do heavy lifting, aggregation, mathematics or the like. \r\n\r\nNo man is an island: today's websites have to interact with several sources of data - from reference databases, to social networking API's and content feeds ... and everything inbetween ... they have to use and reuse caches, update those caches and then, log all about it, they have to do this several hundred million times a week, if your startup is successful. \r\nPHP excells at all of those tasks; but having to execute them synchronously will often mean that when you do start getting the traffic you want to your new project, things are a bit shaky, and from that moment on you're looking to replace the perfectly good code that you \"made it\" with, or even worse you're looking for features to remove ! \r\nBringing threads to PHP stretches your two seconds as far as it will go; and I believe allow you to design your applications to do more than you would if Threads were not available; and allow you to develop much faster than\r\nyou can in Java or .NET, or any other language ( perhaps ), and as a result, you will be a happier human being, as will your boss, and your projects have virtually no limits ...\r\n\r\n### SAPI Support\r\n\r\nNo restrictions here, you should have no problem running pthreads in your chosen SAPI.\r\n\r\n### Documentation\r\n\r\nDocumentation can be found in the PHP manual: http://docs.php.net/manual/en/book.pthreads.php, and some examples can be found in the \"examples\" folder in the master repository.\r\n\r\nFurther insights and occasional announcements can be read at the http://pthreads.org site where pthreads is developed and tested in the real world.\r\n\r\nIf you have had the time to put any cool demo's together and would like them showcased on pthreads.org please get in touch.\r\n\r\n### Feedback\r\n\r\nPlease submit issues, and send your feedback and suggestions as often as you have them.\r\n\r\n### Developers\r\n\r\nThere is no defined API for you to create your own threads in your extensions, this project aims to provide Userland threading, it does not aim to provide a threading API for extension developers. I suggest you allow users to decide what they thread and keep your own extension focused on your functionality.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}